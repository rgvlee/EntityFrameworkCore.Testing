<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFrameworkCore.Testing.Common</name>
    </assembly>
    <members>
        <member name="T:EntityFrameworkCore.Testing.Common.AsyncQueryProvider`1">
            <inheritdoc />
        </member>
        <member name="P:EntityFrameworkCore.Testing.Common.AsyncQueryProvider`1.Source">
            <summary>
                The query provider source.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.AsyncQueryProvider`1.CreateQuery(System.Linq.Expressions.Expression)">
            <inheritdoc />
            <remarks>In this implementation it is just a wrapper for <see cref="M:EntityFrameworkCore.Testing.Common.AsyncQueryProvider`1.CreateQuery``1(System.Linq.Expressions.Expression)" /></remarks>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.AsyncQueryProvider`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.AsyncQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.AsyncQueryProvider`1.Execute``1(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.AsyncQueryProvider`1.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:EntityFrameworkCore.Testing.Common.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EntityFrameworkCore.Testing.Common.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EntityFrameworkCore.Testing.Common.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EntityFrameworkCore.Testing.Common.ExceptionMessages.CannotCreateDbSetTypeNotIncludedInModel">
            <summary>
              Looks up a localized string similar to Cannot create a DbSet for &apos;{0}&apos; because this type is not included in the model for the context..
            </summary>
        </member>
        <member name="P:EntityFrameworkCore.Testing.Common.ExceptionMessages.UnableToFindSuitableDbContextConstructor">
            <summary>
              Looks up a localized string similar to Unable to find a suitable constructor. TDbContext must have a parameterless or DbContextOptions/DbContextOptions&lt;TDbContext&gt; constructor..
            </summary>
        </member>
        <member name="T:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextBuilder`1">
            <summary>
                The mocked db context builder.
            </summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
        </member>
        <member name="F:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextBuilder`1.Options">
            <summary>
                The create factory options.
            </summary>
        </member>
        <member name="P:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextBuilder`1.MockedDbContext">
            <summary>
                The mocked db context.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextBuilder`1.UseDbConnection(System.Data.Common.DbConnection)">
            <summary>
                The parameter that will be used in direct commands (context.Database.GetDbConnection();).
            </summary>
            <param name="dbConnection">
               db connection instance.
            </param>
            <returns>The mocked db context builder.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextBuilder`1.UseConstructorWithParameters(System.Object[])">
            <summary>
                The parameters that will be used to create the mocked db context and, if one is not provided,
                the in-memory context that the mocked db context will use for in-memory provider supported operations.
            </summary>
            <param name="constructorParameters">
                The constructor parameters.
            </param>
            <returns>The mocked db context builder.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextBuilder`1.UseDbContext(`0)">
            <summary>
                The db context instance that the mocked db context will use for in-memory provider supported operations.
            </summary>
        </member>
        <member name="T:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextFactory`1">
            <summary>
                The base mocked db context factory.
            </summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
        </member>
        <member name="F:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextFactory`1.Logger">
            <summary>
                The logger instance.
            </summary>
        </member>
        <member name="F:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextFactory`1.ConstructorParameters">
            <summary>
                The parameters that will be used to create the mocked db context and, if one is not provided,
                the in-memory context that the mocked db context will use for in-memory provider supported operations.
            </summary>
        </member>
        <member name="F:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextFactory`1.DbContext">
            <summary>
                The db context instance that the mocked db context will use for in-memory provider supported operations.
            </summary>
        </member>
        <member name="F:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextFactory`1.DbConnection">
            <summary>
                The db connection instance that the mocked db context will use in direct commands.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextFactory`1.#ctor(EntityFrameworkCore.Testing.Common.Helpers.MockedDbContextFactoryOptions{`0})">
            <summary>
                Constructor.
            </summary>
            <param name="options">The mocked db context factory options.</param>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.Helpers.BaseMockedDbContextFactory`1.Create">
            <summary>
                Creates and sets up a mocked db context.
            </summary>
            <returns>A mocked db context.</returns>
        </member>
        <member name="T:EntityFrameworkCore.Testing.Common.Helpers.ExpressionHelper">
            <summary>
                A helper for expressions.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.Helpers.ExpressionHelper.CreatePropertyExpression``2(System.Reflection.PropertyInfo)">
            <summary>
                Creates a property expression for the specified property.
            </summary>
            <typeparam name="TParameter">The expression parameter.</typeparam>
            <typeparam name="TProperty">The expression property.</typeparam>
            <param name="propertyInfo">The property info of the property to create the expression for.</param>
            <returns>A property expression for the specified property.</returns>
        </member>
        <member name="T:EntityFrameworkCore.Testing.Common.Helpers.IMockedDbContextBuilder`1">
            <summary>
                The mocked db context builder.
            </summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
        </member>
        <member name="P:EntityFrameworkCore.Testing.Common.Helpers.IMockedDbContextBuilder`1.MockedDbContext">
            <summary>
                The mocked db context.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.Helpers.IMockedDbContextBuilder`1.UseConstructorWithParameters(System.Object[])">
            <summary>
                The parameters that will be used to create the mocked db context and, if one is not provided,
                the in-memory context that the mocked db context will use for in-memory provider supported operations.
            </summary>
            <param name="constructorParameters">
                The constructor parameters.
            </param>
            <returns>The mocked db context builder.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.Helpers.IMockedDbContextBuilder`1.UseDbContext(`0)">
            <summary>
                The db context instance that the mocked db context will use for in-memory provider supported operations.
            </summary>
        </member>
        <member name="T:EntityFrameworkCore.Testing.Common.Helpers.MockedDbContextFactoryOptions`1">
            <summary>
                The mocked db context factory options.
            </summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
        </member>
        <member name="P:EntityFrameworkCore.Testing.Common.Helpers.MockedDbContextFactoryOptions`1.DbContext">
            <summary>
                The db context instance that the mocked db context will use for in-memory provider supported operations.
            </summary>
        </member>
        <member name="P:EntityFrameworkCore.Testing.Common.Helpers.MockedDbContextFactoryOptions`1.ConstructorParameters">
            <summary>
                The parameters that will be used to create the mocked db context and, if one is not provided,
                the in-memory context that the mocked db context will use for in-memory provider supported operations.
            </summary>
        </member>
        <member name="P:EntityFrameworkCore.Testing.Common.Helpers.MockedDbContextFactoryOptions`1.DbConnection">
            <summary>
                The db connection will be use in direct commands (context.Database.GetDbConnection();).
            </summary>
        </member>
        <member name="T:EntityFrameworkCore.Testing.Common.Helpers.ParameterMatchingHelper">
            <summary>
                A helper for parameter matching.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.Helpers.ParameterMatchingHelper.DoInvocationParametersMatchSetUpParameters(System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Determines whether the invocation parameters match the set up parameters.
            </summary>
            <param name="setUpParameters">The set up parameters.</param>
            <param name="invocationParameters">The invocation parameters.</param>
            <returns>true the invocation parameters are a partial or full match of the set up parameters.</returns>
            <remarks>
                If the parameters are DbParameters, parameter name and value are compared.
                Parameter name matching is case insensitive.
                If the value is a string, the matching is case insensitive.
                For everything else an exact match is required.
            </remarks>
        </member>
        <member name="M:EntityFrameworkCore.Testing.Common.Helpers.ParameterMatchingHelper.StringifyParameters(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Converts a sequence of invocation parameters to a string of parameter names and values.
            </summary>
            <param name="invocationParameters">The invocation parameters.</param>
            <returns>A string of parameter names and values.</returns>
        </member>
    </members>
</doc>
