<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntityFrameworkCore.Testing.NSubstitute</name>
    </assembly>
    <members>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Build">
            <summary>
                Provides builders that create mocked instances.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Build.MockFor``1">
            <summary>
                Provides a mocked db context builder.
            </summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <returns>A mocked db context builder.</returns>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Create">
            <summary>
                Factory for creating mocked instances.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Create.MockedDbContextFor``1(System.Object[])">
            <summary>
                Creates a mocked db context.
            </summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="constructorParameters">
                The parameters that will be used to create the mocked db context and, if one is not provided,
                the in-memory context that the mocked db context will use for in-memory provider supported operations.
            </param>
            <returns>A mocked db context.</returns>
            <remarks>
                If you do not provide any constructor arguments this method attempt to create a TDbContext
                via a constructor with a single DbContextOptionsBuilder parameter or a parameterless constructor.
            </remarks>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Create.MockedQueryProviderFor``1(System.Linq.IQueryable{``0})">
            <summary>
                Creates a mocked query provider.
            </summary>
            <typeparam name="T">The queryable type.</typeparam>
            <param name="queryable">The query provider source.</param>
            <returns>A mocked query provider.</returns>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions">
            <summary>
                Extensions for db contexts.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions.AddExecuteSqlCommandResult``1(``0,System.Int32,System.Action{System.String,System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
                Sets up ExecuteSqlCommand invocations to return a specified result.
            </summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="mockedDbContext">The mocked db context.</param>
            <param name="executeSqlCommandResult">The integer to return when ExecuteSqlCommand is invoked.</param>
            <param name="callback">Operations to perform after ExecuteSqlCommand is invoked.</param>
            <returns>The mocked db context.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions.AddExecuteSqlCommandResult``1(``0,System.String,System.Int32,System.Action{System.String,System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
                Sets up ExecuteSqlCommand invocations containing a specified sql string to return a specified result.
            </summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="mockedDbContext">The mocked db context.</param>
            <param name="sql">The ExecuteSqlCommand sql string. Set up supports case insensitive partial matches.</param>
            <param name="executeSqlCommandResult">The integer to return when ExecuteSqlCommand is invoked.</param>
            <param name="callback">Operations to perform after ExecuteSqlCommand is invoked.</param>
            <returns>The mocked db context.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbContextExtensions.AddExecuteSqlCommandResult``1(``0,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Action{System.String,System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
                Sets up ExecuteSqlCommand invocations containing a specified sql string and parameters to return a specified result.
            </summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
            <param name="mockedDbContext">The mocked db context.</param>
            <param name="sql">The ExecuteSqlCommand sql string. Set up supports case insensitive partial matches.</param>
            <param name="parameters">The ExecuteSqlCommand parameters. Set up supports case insensitive partial parameter sequence matching.</param>
            <param name="executeSqlCommandResult">The integer to return when ExecuteSqlCommand is invoked.</param>
            <param name="callback">Operations to perform after ExecuteSqlCommand is invoked.</param>
            <returns>The mocked db context.</returns>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions">
            <summary>
                Extensions for db queries.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions.AddToReadOnlySource``1(Microsoft.EntityFrameworkCore.DbQuery{``0},``0)">
            <summary>
                Adds an item to the end of the mocked db query source.
            </summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="mockedDbQuery">The mocked db query.</param>
            <param name="item">The item to be added to the end of the mocked db query source.</param>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions.AddRangeToReadOnlySource``1(Microsoft.EntityFrameworkCore.DbQuery{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds the items of the specified sequence to the end of the mocked db query source.
            </summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="mockedDbQuery">The mocked db query.</param>
            <param name="items">The sequence whose items should be added to the end of the mocked db query source.</param>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbQueryExtensions.ClearReadOnlySource``1(Microsoft.EntityFrameworkCore.DbQuery{``0})">
            <summary>
                Removes all items from the mocked db query source.
            </summary>
            <typeparam name="TQuery">The query type.</typeparam>
            <param name="mockedDbQuery">The mocked db query.</param>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Extensions.DbSetExtensions">
            <summary>
                Extensions for db sets.
            </summary>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryableExtensions">
            <summary>
                Extensions for queryable collections.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryableExtensions.AddFromSqlResult``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Sets up FromSql invocations to return a specified result.
            </summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="mockedQueryable">The mocked queryable.</param>
            <param name="fromSqlResult">The FromSql result.</param>
            <returns>The mocked queryable.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryableExtensions.AddFromSqlResult``1(System.Linq.IQueryable{``0},System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Sets up FromSql invocations containing a specified sql string to return a specified result.
            </summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="mockedQueryable">The mocked queryable.</param>
            <param name="sql">The FromSql sql string. Set up supports case insensitive partial matches.</param>
            <param name="fromSqlResult">The FromSql result.</param>
            <returns>The mocked queryable.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryableExtensions.AddFromSqlResult``1(System.Linq.IQueryable{``0},System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Sets up FromSql invocations containing a specified sql string and parameters to return a specified result.
            </summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="mockedQueryable">The mocked queryable.</param>
            <param name="sql">The FromSql sql string. Set up supports case insensitive partial matches.</param>
            <param name="parameters">The FromSql parameters. Set up supports case insensitive partial parameter sequence matching.</param>
            <param name="fromSqlResult">The FromSql result.</param>
            <returns>The mocked queryable.</returns>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryProviderExtensions">
            <summary>
                Extensions for collection query providers.
            </summary>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryProviderExtensions.AddFromSqlResult``1(System.Linq.IQueryProvider,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Sets up FromSql invocations to return a specified result.
            </summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="mockedQueryProvider">The mocked query provider.</param>
            <param name="fromSqlResult">The FromSql result.</param>
            <returns>The mocked queryable.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryProviderExtensions.AddFromSqlResult``1(System.Linq.IQueryProvider,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Sets up FromSql invocations containing a specified sql string to return a specified result.
            </summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="mockedQueryProvider">The mocked query provider.</param>
            <param name="sql">The FromSql sql string. Set up supports case insensitive partial matches.</param>
            <param name="fromSqlResult">The FromSql result.</param>
            <returns>The mocked queryable.</returns>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Extensions.QueryProviderExtensions.AddFromSqlResult``1(System.Linq.IQueryProvider,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Sets up FromSql invocations containing a specified sql string and parameters to return a specified result.
            </summary>
            <typeparam name="T">The queryable source type.</typeparam>
            <param name="mockedQueryProvider">The mocked query provider.</param>
            <param name="sql">The FromSql sql string. Set up supports case insensitive partial matches.</param>
            <param name="parameters">The FromSql parameters. Set up supports case insensitive partial parameter sequence matching.</param>
            <param name="fromSqlResult">The sequence to return when FromSql is invoked.</param>
            <returns>The mocked query provider.</returns>
        </member>
        <member name="T:EntityFrameworkCore.Testing.NSubstitute.Helpers.MockedDbContextBuilder`1">
            <summary>
                The mocked db context builder.
            </summary>
            <typeparam name="TDbContext">The db context type.</typeparam>
        </member>
        <member name="M:EntityFrameworkCore.Testing.NSubstitute.Helpers.MockedDbContextBuilder`1.Create">
            <summary>
                Creates the mocked db context.
            </summary>
            <returns>A mocked db context.</returns>
        </member>
    </members>
</doc>
